#!/bin/bash
# Initializes the JSpecify reference checker project by downloading required
# sibling projects.
#
# USAGE
#
#   initialize-project
#
# ENVIRONMENT VARIABLES
#
# Set SHALLOW=1 to clone sibling projects at depth 1.
#
# This script automatically tries to download your fork of
# wmdietl/checker-framework (merge-eisop branch), jspecify/jspecify, or
# jspecify/jdk, if they exist. It uses the URL of the origin remote (the default
# remote created when cloning a repo) to determine that.
#
# If that doesn't work, you can set the FORK environment value to the Git URL
# that contains your forks. For example, FORK=git@github.com:myorg means this
# script tries to clone the following before falling back to the default repos:
#
# git@github:myorg/checker-framework.git
# git@github:myorg/jspecify.git
# git@github:myorg/jdk.git

set -eu

run() {
  printf '%q ' "$@"
  echo
  "$@"
}

remote_url() {
  if [[ -n "${FORK:-}" ]]; then
    echo "${FORK}"
    return
  fi
  dirname "$(git config --default '' --get remote.origin.url)"
}

git_clone() {
  local repo="$1"
  shift

  if [[ -d "../${repo}" ]]; then
    return
  fi

  local git=(git clone)
  if (( "${SHALLOW:-0}" )); then
    git+=(--depth 1 --single-branch)
  fi
  git+=("$@")

  local remote_url
  remote_url="$(remote_url)"
  if [[ -n "${remote_url}" ]]; then
    if run "${git[@]}" "${remote_url}/${repo}.git" "../${repo}"; then
      return
    fi
  fi
  if [[ "${repo}" == checker-framework ]]; then
    run "${git[@]}" --branch merge-eisop "https://github.com/wmdietl/${repo}.git" "../${repo}"
  else
    run "${git[@]}" "https://github.com/jspecify/${repo}.git" "../${repo}"
  fi
}

# We test using some modified samples in a different branch of the jspecify
# repo, so we check out that branch. However, we fetch all branches even when
# SHALLOW is set so we can run conformance tests.
git_clone jspecify --no-single-branch --branch samples-google-prototype

git_clone jdk --depth 1 --single-branch

git_clone checker-framework
